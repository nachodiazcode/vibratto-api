import Notification from "../models/Notification.js";
import logger from "../utils/logger.js";

// üîî Obtener todas las notificaciones con paginaci√≥n
export const getNotifications = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const [notifications, total] = await Promise.all([
      Notification.find({ usuario: req.user.id })
        .sort({ creadoEn: -1 })
        .skip(skip)
        .limit(limit),
      Notification.countDocuments({ usuario: req.user.id }),
    ]);

    logger.info(`üîî [${req.user.id}] obtuvo ${notifications.length} notificaciones`);

    res.json({
      ok: true,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
      notifications,
    });
  } catch (error) {
    logger.error(`‚ùå Error en getNotifications para [${req.user.id}]: ${error.message}`);
    res.status(500).json({ ok: false, mensaje: "Error al obtener notificaciones", error: error.message });
  }
};

// üì© Crear nueva notificaci√≥n (interno / backend)
export const createNotification = async (usuarioId, mensaje, io = null) => {
  try {
    const nueva = new Notification({ usuario: usuarioId, mensaje });
    await nueva.save();

    logger.info(`üì® Notificaci√≥n creada para [${usuarioId}]: "${mensaje}"`);

    // Emitir en tiempo real si hay socket
    if (io) {
      io.to(usuarioId).emit("nuevaNotificacion", nueva);
      logger.debug(`üì° Notificaci√≥n enviada v√≠a socket a [${usuarioId}]`);
    }

    return nueva;
  } catch (error) {
    logger.error(`‚ùå Error al crear notificaci√≥n para [${usuarioId}]: ${error.message}`);
    return null;
  }
};

// ‚úÖ Marcar una notificaci√≥n como le√≠da
export const markAsRead = async (req, res) => {
  try {
    const noti = await Notification.findById(req.params.id);
    if (!noti) {
      logger.warn(`‚ö†Ô∏è Notificaci√≥n [${req.params.id}] no encontrada por [${req.user.id}]`);
      return res.status(404).json({ ok: false, mensaje: "Notificaci√≥n no encontrada" });
    }

    if (!noti.usuario.equals(req.user.id)) {
      logger.warn(`üö´ Acceso denegado: [${req.user.id}] intent√≥ marcar ajena`);
      return res.status(403).json({ ok: false, mensaje: "No autorizado" });
    }

    noti.leida = true;
    await noti.save();

    logger.info(`‚úÖ Notificaci√≥n [${noti._id}] marcada como le√≠da por [${req.user.id}]`);
    res.json({ ok: true, mensaje: "Notificaci√≥n marcada como le√≠da", notificacion: noti });
  } catch (error) {
    logger.error(`‚ùå Error en markAsRead [${req.params.id}] por [${req.user.id}]: ${error.message}`);
    res.status(500).json({ ok: false, mensaje: "Error al marcar como le√≠da", error: error.message });
  }
};

// üóëÔ∏è Eliminar notificaci√≥n individual
export const deleteNotification = async (req, res) => {
  try {
    const noti = await Notification.findById(req.params.id);
    if (!noti) {
      logger.warn(`‚ö†Ô∏è Notificaci√≥n [${req.params.id}] no encontrada para eliminaci√≥n por [${req.user.id}]`);
      return res.status(404).json({ ok: false, mensaje: "Notificaci√≥n no encontrada" });
    }

    if (!noti.usuario.equals(req.user.id)) {
      logger.warn(`üö´ [${req.user.id}] intent√≥ eliminar notificaci√≥n ajena`);
      return res.status(403).json({ ok: false, mensaje: "No autorizado" });
    }

    await noti.deleteOne();
    logger.info(`üóëÔ∏è Notificaci√≥n [${req.params.id}] eliminada por [${req.user.id}]`);
    res.json({ ok: true, mensaje: "Notificaci√≥n eliminada correctamente" });
  } catch (error) {
    logger.error(`‚ùå Error en deleteNotification [${req.params.id}]: ${error.message}`);
    res.status(500).json({ ok: false, mensaje: "Error al eliminar notificaci√≥n", error: error.message });
  }
};

// üîÑ Marcar todas como le√≠das
export const markAllAsRead = async (req, res) => {
  try {
    const result = await Notification.updateMany(
      { usuario: req.user.id, leida: false },
      { $set: { leida: true } }
    );

    logger.info(`üìö [${req.user.id}] marc√≥ ${result.modifiedCount} notificaciones como le√≠das`);
    res.json({ ok: true, mensaje: "Todas las notificaciones marcadas como le√≠das" });
  } catch (error) {
    logger.error(`‚ùå Error en markAllAsRead para [${req.user.id}]: ${error.message}`);
    res.status(500).json({ ok: false, mensaje: "Error al marcar todas como le√≠das", error: error.message });
  }
};
